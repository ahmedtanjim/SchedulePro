package com.shiftboard.schedulepro.core.network.commonimport com.serjltt.moshi.adapters.Wrappedimport com.shiftboard.schedulepro.core.network.adapters.*import com.shiftboard.schedulepro.core.network.model.notification.*import com.shiftboard.schedulepro.core.network.model.schedule.*import com.squareup.moshi.Moshiimport com.squareup.moshi.Typesimport com.squareup.moshi.adapters.PolymorphicJsonAdapterFactoryimport okhttp3.Cacheimport okhttp3.OkHttpClientimport okhttp3.logging.HttpLoggingInterceptorimport retrofit2.Retrofitimport retrofit2.converter.moshi.MoshiConverterFactoryobject NetworkManager {    private val baseUrl = "https://0.0.0.0/"    fun createOkHttpClient(        cache: Cache,        authInterceptor: AuthInterceptor,        urlInterceptor: UrlInterceptor,        resultInterceptor: ResultInterceptor,        loggingInterceptor: HttpLoggingInterceptor,        apiVersioningInterceptor: ApiVersioningInterceptor,    ): OkHttpClient {        return OkHttpClient.Builder()            .cache(cache)            .addInterceptor(resultInterceptor)            .addInterceptor(urlInterceptor)            .addInterceptor(apiVersioningInterceptor)            // Always make sure your logging interceptor goes after anything you want to log//            .addInterceptor(loggingInterceptor)            // Placing this after the logging interceptor means you wont log auth tokens even in debug mode            .addInterceptor(authInterceptor)            .addInterceptor(loggingInterceptor)            .build()    }    fun createRetrofit(moshi: Moshi, client: OkHttpClient): Retrofit = Retrofit.Builder()        .baseUrl(baseUrl)        .addConverterFactory(MoshiConverterFactory.create(moshi))        .client(client)        .build()    fun createMoshi(): Moshi {        return Moshi.Builder()            .add(                PolymorphicJsonAdapterFactory.of(ScheduleItemsModel::class.java, "type")                    .withSubtype(ShiftElementModel::class.java, "Shift")                    .withSubtype(LeaveElementModel::class.java, "Leave")                    .withSubtype(PendingLeaveElementModel::class.java, "LeaveRequest")                    .withSubtype(NoneElementModel::class.java, "NotScheduled")                    .withSubtype(SignupElementModel::class.java, "SignUp")                    .withSubtype(HolidayElementModel::class.java, "Holiday")                    .withSubtype(ProjectedShiftElementModel::class.java, "ProjectedShift")                    .withSubtype(ProjectedLeaveElementModel::class.java, "ProjectedLeave")                    .withSubtype(OpenShiftElementModel::class.java, "OpenShift")                    .withSubtype(OpenShiftElementModel::class.java, "OpenShiftRequest")                    .withSubtype(TradeElementModel::class.java, "Trade")                    .withDefaultValue(ScheduleErrorElement)            )            .add(                PolymorphicJsonAdapterFactory.of(NotificationContent::class.java, "type")                    .withSubtype(LeaveRequestStatusUpdatedContent::class.java, "LeaveRequestStatusUpdated")                    .withSubtype(LeaveRequestCancellationContent::class.java, "LeaveRequestCancellationRequestStatusUpdated")                    .withSubtype(LeaveRequestAmendmentContent::class.java, "LeaveRequestAmendmentRequestStatusUpdated")                    .withSubtype(LeaveRequestDetailsContent::class.java, "LeaveRequestDetailsUpdated")                    .withSubtype(SchedulePublishedContent::class.java, "SchedulePublishedSchedulePublished")                    .withSubtype(SingleOptionalShiftNotification::class.java, "ShiftEdited")                    .withSubtype(SingleOptionalShiftNotification::class.java, "ShiftAssignedOrUnassigned")                    .withSubtype(SingleOptionalShiftNotification::class.java, "SingleOptionalShiftNotification")                    .withSubtype(BulkNotification::class.java, "BulkShiftsEdited")                    .withSubtype(BulkNotification::class.java, "BulkShiftsAssignedOrUnassigned")                    .withSubtype(BulkNotification::class.java, "BulkNotification")                    .withSubtype(OpenShiftNotification::class.java, "OpenShiftRequestStatusUpdated")                    .withSubtype(OpenShiftNotification::class.java, "OpenShiftsPublished")                    .withSubtype(TurndownPosterNoTakersNotification::class.java, "TurndownPosterNoTakers")                    .withSubtype(TurndownPosterReassignedNotification::class.java, "TurndownPosterReassigned")                    .withSubtype(TradeRequested::class.java, "TradeRequested")                    .withSubtype(TradeRequestUpdated::class.java, "TradeRequestUpdated")            )            .add(Wrapped.ADAPTER_FACTORY)            .add(MapAdapter.INSTANCE)            .add(AndroidColorAdapter.INSTANCE)            .add(ForceToBooleanAdapter.INSTANCE)            .add(StringOrNullAdapter.INSTANCE)            .add(ForceToStringAdapter.INSTANCE)            .add(NotificationAdapter.INSTANCE)            .add(LocalDateTimeAdapter())            .add(LocalDateAdapter())            .add(OffsetDateTimeAdapter())            .build()    }}